{"version":3,"sources":["GoDataGathering.jsx","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","color","borderBottomColor","borderColor","width","paper","padding","spacing","textAlign","palette","text","secondary","square","form","marginTop","submit","margin","GoDataGathering","props","classes","useState","rows","setRows","input","setInput","pageSize","setPageSize","page","setPage","significance","setSignificance","useHistory","open","setOpen","scroll","currentTerm","setCurrentTerm","currentTermDescription","setCurrentTermDescription","listOfGenes","setListOfGenes","columns","field","headerName","hide","renderCell","params","style","value","handleSubmit","a","requestOptions","method","headers","body","JSON","stringify","fetch","response","status","json","textInput","useRef","handleClose","handleCellClick","param","event","colDef","console","log","stopPropagation","row","term","window","description","data","gene_list","resp","test","control","descriptionElementRef","React","useEffect","descriptionElement","current","focus","Fragment","CssBaseline","AppBar","variant","Toolbar","Typography","position","left","className","name","onClick","Container","maxWidth","id","Grid","container","component","item","xs","sm","md","Paper","TextField","label","multiline","inputRef","onChange","e","target","inputProps","fontFamily","defaultValue","Button","type","size","display","maxHeight","minWidth","minHeight","lg","disableSelectionOnClick","autoHeight","onPageChange","pagination","length","Dialog","onClose","DialogTitle","DialogContent","dividers","DialogContentText","ref","tabIndex","map","dataIn","cnag","function","DialogActions","App","sessionStorage","clear","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.252a6175.chunk.js","sourcesContent":["import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useState, useRef } from \"react\";\r\nimport { Dialog } from \"@material-ui/core\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& label.Mui-focused\": {\r\n      color: \"grey\",\r\n    },\r\n    \"& .MuiInput-underline:after\": {\r\n      borderBottomColor: \"black\",\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n      \"& fieldset\": {\r\n        borderColor: \"grey\",\r\n      },\r\n      \"&:hover fieldset\": {\r\n        borderColor: \"grey\",\r\n      },\r\n      \"&.Mui-focused fieldset\": {\r\n        borderColor: \"black\",\r\n      },\r\n      \"&.MuiContainer-maxWidthLg\": {\r\n        width: \"2280px\",\r\n      },\r\n    },\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n    square: \"true\",\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function GoDataGathering(props) {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = useState([]);\r\n  const [input, setInput] = useState();\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const [page, setPage] = useState(0);\r\n  const [significance, setSignificance] = useState(0.001);\r\n  const history = useHistory();\r\n  const [open, setOpen] = useState(false);\r\n  const [scroll, setScroll] = useState(\"paper\");\r\n  const [currentTerm, setCurrentTerm] = useState();\r\n  const [currentTermDescription, setCurrentTermDescription] = useState();\r\n  const [listOfGenes, setListOfGenes] = useState([]);\r\n\r\n  // Columns for the results table (Data Grid)\r\n  const columns = [\r\n    { field: \"id\", headerName: \"ID\", width: 90, hide: \"true\" },\r\n    {\r\n      field: \"pvalue\",\r\n      headerName: \"P-value\",\r\n      width: 150,\r\n    },\r\n    {\r\n      field: \"test\",\r\n      headerName: \"In test group\",\r\n      width: 200,\r\n    },\r\n    {\r\n      field: \"control\",\r\n      headerName: \"In control group\",\r\n      width: 200,\r\n    },\r\n    {\r\n      field: \"term\",\r\n      headerName: \"Term\",\r\n      width: 120,\r\n      renderCell: (params) => (\r\n        <div style={{ color: \"blue\" }}>{params.value}</div>\r\n      ),\r\n    },\r\n    {\r\n      field: \"description\",\r\n      headerName: \"Description\",\r\n      width: 490,\r\n    },\r\n  ];\r\n\r\n  // Fetches data in response to input gene list\r\n  const handleSubmit = async () => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(input),\r\n    };\r\n    const response = await fetch(\r\n      `http://127.0.0.1:5000/geneontology/${significance}`,\r\n      requestOptions\r\n    );\r\n    if (response.status === 200) {\r\n      const rows = await response.json();\r\n      setRows(rows);\r\n    } else {\r\n      setRows([]);\r\n    }\r\n  };\r\n  let textInput = useRef(null);\r\n\r\n  const handlePageSizeChange = (params) => {\r\n    setPageSize(params.pageSize);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // Sends request for the individual GO group data for test/control\r\n  const handleCellClick = async (param, event) => {\r\n    if (\r\n      param.colDef.field === \"pvalue\" ||\r\n      param.colDef.field === \"description\"\r\n    ) {\r\n      console.log(\"Clicked P-value\", param.colDef.field);\r\n      setOpen(false);\r\n      event.stopPropagation();\r\n    } else if (param.colDef.field === \"term\") {\r\n      console.log(\"GO term\", param.row.term);\r\n      let term = param.row.term;\r\n      window.open(`https://www.ebi.ac.uk/QuickGO/term/${term}`);\r\n    } else if (\r\n      param.colDef.field === \"test\" ||\r\n      param.colDef.field === \"control\"\r\n    ) {\r\n      setOpen(true);\r\n      setCurrentTerm(param.row.term);\r\n      setCurrentTermDescription(param.row.description);\r\n      let data = {\r\n        gene_list: input,\r\n        term: param.row.term,\r\n      };\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      };\r\n      const response = await fetch(\"http://127.0.0.1:5000/geneontology/terms\", requestOptions);\r\n      if (response.status === 200) {\r\n        const resp = await response.json();\r\n\r\n        if (param.colDef.field === \"test\") {\r\n          setListOfGenes(resp.test);\r\n        } else {\r\n          setListOfGenes(resp.control);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  \r\n  const descriptionElementRef = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (open) {\r\n      const { current: descriptionElement } = descriptionElementRef;\r\n      if (descriptionElement !== null) {\r\n        descriptionElement.focus();\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar color=\"default\" variant=\"contained\">\r\n        <Toolbar>\r\n          <Typography variant=\"h5\">\r\n            Gene set functional enrichment analysis for Cryptococcus neoformans\r\n            var. grubii\r\n          </Typography>\r\n          <Typography\r\n            variant=\"subtitle2\"\r\n            style={{ position: \"fixed\", left: \"90%\", color: \"blue\" }}\r\n            className={classes.name}\r\n            onClick={() => window.open(`https://www.linkedin.com/in/sophielev/`)}\r\n          >\r\n             by Sophie Lev Aug 2021\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth=\"lg\">\r\n        <Toolbar id=\"back-to-top-anchor\" />\r\n        <br></br>\r\n        <Grid container component=\"main\" className={classes.root}>\r\n          <CssBaseline />\r\n          <Grid item xs={12} sm={8} md={6} component={Paper}>\r\n            <div className={classes.paper}>\r\n              <TextField\r\n                id=\"standard-multiline-static\"\r\n                label=\"List of identifiers (CNAG_XXXXX)\"\r\n                multiline\r\n                rows={5}\r\n                inputRef={textInput}\r\n                variant=\"outlined\"\r\n                style={{ width: \"100%\" }}\r\n                onChange={(e) => setInput(e.target.value)}\r\n                inputProps={{ style: { fontFamily: \"nunito\", color: \"black\" } }}\r\n              ></TextField>\r\n              <br></br>\r\n            </div>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={8} md={6} component={Paper}>\r\n            <div className={classes.paper}>\r\n              <TextField\r\n                id=\"standard-multiline-static\"\r\n                label=\"P-value cutoff\"\r\n                multiline\r\n                rows={1}\r\n                defaultValue={0.001}\r\n                variant=\"outlined\"\r\n                style={{ width: \"100%\" }}\r\n                onChange={(e) => setSignificance(e.target.value)}\r\n                inputProps={{ style: { fontFamily: \"nunito\", color: \"black\" } }}\r\n              ></TextField>\r\n              <br></br>\r\n              <br></br>\r\n              <Button\r\n                className={classes.margin}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                style={{\r\n                  display: \"inline block\",\r\n                  maxWidth: \"200px\",\r\n                  maxHeight: \"60px\",\r\n                  minWidth: \"200px\",\r\n                  minHeight: \"30px\",\r\n                }}\r\n                onClick={(e) => handleSubmit(e.target.value)}\r\n              >\r\n                Submit\r\n              </Button>\r\n              <Button\r\n                className={classes.margin}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                size=\"large\"\r\n                style={{\r\n                  display: \"inline block\",\r\n                  maxWidth: \"200px\",\r\n                  maxHeight: \"60px\",\r\n                  minWidth: \"200px\",\r\n                  minHeight: \"30px\",\r\n                }}\r\n                onClick={() => (textInput.current.value = \"\")}\r\n              >\r\n                Clear\r\n              </Button>\r\n              <br></br>\r\n            </div>\r\n          </Grid>\r\n          <Grid item lg={12} sm={8} md={5} component={Paper}>\r\n            <div className={classes.paper}>\r\n              <Container maxWidth=\"lg\">\r\n                <div style={{ width: \"100%\" }}>\r\n                  <DataGrid\r\n                    rows={rows}\r\n                    columns={columns}\r\n                    pageSize={5}\r\n                    disableSelectionOnClick\r\n                    autoHeight\r\n                    page={page}\r\n                    onPageChange={(params) => {\r\n                      setPage(params.page);\r\n                    }}\r\n                    pagination\r\n                    pageSize={pageSize}\r\n                    onPageSizeChange={handlePageSizeChange}\r\n                    rowsPerPageOptions={[10, 50]}\r\n                    rowCount={rows.length}\r\n                    onCellClick={handleCellClick}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    scroll={scroll}\r\n                    aria-labelledby=\"scroll-dialog-title\"\r\n                    aria-describedby=\"scroll-dialog-description\"\r\n                  >\r\n                    <DialogTitle id=\"scroll-dialog-title\">\r\n                      {currentTerm} - {currentTermDescription}\r\n                    </DialogTitle>\r\n                    <DialogContent dividers={scroll === \"paper\"}>\r\n                    <DialogContentText\r\n                        id=\"cnag\"\r\n                        ref={descriptionElementRef}\r\n                        tabIndex={-1}\r\n                      >\r\n                        {listOfGenes.map((dataIn) => (\r\n                          <div key={dataIn.cnag}>\r\n                            <Typography\r\n                              variant=\"body2\"\r\n                              component={\"span\"}\r\n                              color=\"textPrimary\"\r\n                            >\r\n                              {`${dataIn.cnag} ${dataIn.function}`}\r\n                            </Typography>\r\n                          </div>\r\n                        ))}\r\n                      </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                      <Button onClick={handleClose} color=\"primary\">\r\n                        Close\r\n                      </Button>\r\n                    </DialogActions>\r\n                  </Dialog>\r\n                </div>\r\n              </Container>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport GoDataGathering from \"./GoDataGathering\";\r\n\r\nfunction App() {\r\n  sessionStorage.clear();\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Route exact path=\"/\">\r\n          <GoDataGathering />\r\n        </Route>\r\n        <Route path=\"/godata\">\r\n          <GoDataGathering />\r\n        </Route>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}